/* Button */
input[type="submit"],
input[type="reset"],
input[type="button"],
button,
.button {
  border: solid 2px #36383c; }
  input[type="submit"].special,
  input[type="reset"].special,
  input[type="button"].special,
  button.special,
  .button.special {
    border: 0; }

/* Panel */
.panel {
  background: #242629;
  display: none; }
  .panel.active {
    display: block; }
  .panel > .closer:before {
    content: '\00d7';
    font-size: 42px; }

/* Main */
#main .thumb > h2 {
  text-align: center;
  width: 100%;
  left: 0; }

/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
